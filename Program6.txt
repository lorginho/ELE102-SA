using System;
using OpenTK;
using OpenTK.Graphics;
using OpenTK.Graphics.OpenGL;
using OpenTK.Input;
using System.Collections.Generic;

namespace LetterU3DApp
{
    public class Game : GameWindow
    {
        private List<LetterU> letters;
        private int activeLetterIndex = 0;
        private const float moveSpeed = 0.1f;
        private const float rotationSpeed = 1.5f;

        // Color del fondo y de las líneas
        private Color4 backgroundColor = new Color4(0.05f, 0.1f, 0.2f, 1.0f); // Azul oscuro
        private Color4 lineColor = new Color4(1.0f, 1.0f, 1.0f, 1.0f); // Blanco

        // Mostrar ejes
        private bool showAxes = true;

        // Ancho de línea
        private float lineWidth = 1.5f;

        // Rotación de los ejes
        private float axisRotationX = 0.0f;
        private float axisRotationY = 0.0f;
        private bool axisRotationEnabled = false;

        public Game(int width, int height, string title) : base(width, height, GraphicsMode.Default, title) { }

        protected override void OnLoad(EventArgs e)
        {
            base.OnLoad(e);
            GL.ClearColor(backgroundColor);
            GL.Enable(EnableCap.DepthTest);

            // Configurar suavizado de líneas
            GL.Enable(EnableCap.LineSmooth);
            GL.Hint(HintTarget.LineSmoothHint, HintMode.Nicest);
            GL.Enable(EnableCap.Blend);
            GL.BlendFunc(BlendingFactor.SrcAlpha, BlendingFactor.OneMinusSrcAlpha);

            letters = new List<LetterU>
            {
                new LetterU(new Vector3(0, 0, 0)),
                new LetterU(new Vector3(2, 0, 0)),
            };
        }

        protected override void OnRenderFrame(FrameEventArgs e)
        {
            base.OnRenderFrame(e);

            GL.Clear(ClearBufferMask.ColorBufferBit | ClearBufferMask.DepthBufferBit);

            // Configurar matriz de proyección
            Matrix4 perspective = Matrix4.CreatePerspectiveFieldOfView(
                MathHelper.DegreesToRadians(45.0f),
                Width / (float)Height,
                0.1f,
                100.0f);

            // Configurar cámara
            Matrix4 lookat = Matrix4.LookAt(
                new Vector3(0.0f, 0.0f, 3.0f),
                new Vector3(0.0f, 0.0f, 0.0f),
                new Vector3(0.0f, 1.0f, 0.0f));

            GL.MatrixMode(MatrixMode.Projection);
            GL.LoadMatrix(ref perspective);

            GL.MatrixMode(MatrixMode.Modelview);
            GL.LoadMatrix(ref lookat);

            // Aplicar rotaciones de los ejes
            GL.PushMatrix();
            GL.Rotate(axisRotationX, 1.0f, 0.0f, 0.0f);
            GL.Rotate(axisRotationY, 0.0f, 1.0f, 0.0f);

            // Dibujar ejes si están habilitados
            if (showAxes)
                DrawAxes();

            // Establecer ancho de línea para la U
            GL.LineWidth(lineWidth);

            // Dibujar las letras U
            foreach (var letter in letters)
            {
                letter.Draw();
            }

            GL.PopMatrix();

            // Mostrar información en el título de la ventana
            var activeLetter = letters[activeLetterIndex];
            Title = $"Letra U Wireframe - Letra Activa: {activeLetterIndex + 1} | " +
                    $"Posición: X={activeLetter.Position.X:F2}, Y={activeLetter.Position.Y:F2}, Z={activeLetter.Position.Z:F2} | " +
                    $"Ancho de línea: {lineWidth:F1} | " +
                    $"Ejes: {(showAxes ? "Visibles" : "Ocultos")}";

            SwapBuffers();
        }

        private void DrawAxes()
        {
            float axisLength = 1.5f;

            GL.LineWidth(1.0f);
            GL.Begin(PrimitiveType.Lines);

            // Eje X - Rojo
            GL.Color3(1.0f, 0.0f, 0.0f);
            GL.Vertex3(-axisLength, 0, 0);
            GL.Vertex3(axisLength, 0, 0);

            // Eje Y - Verde
            GL.Color3(0.0f, 1.0f, 0.0f);
            GL.Vertex3(0, -axisLength, 0);
            GL.Vertex3(0, axisLength, 0);

            // Eje Z - Azul
            GL.Color3(0.0f, 0.0f, 1.0f);
            GL.Vertex3(0, 0, -axisLength);
            GL.Vertex3(0, 0, axisLength);

            GL.End();
        }

        protected override void OnResize(EventArgs e)
        {
            base.OnResize(e);
            GL.Viewport(0, 0, Width, Height);
        }

        protected override void OnUpdateFrame(FrameEventArgs e)
        {
            base.OnUpdateFrame(e);

            var keyState = Keyboard.GetState();

            // Salir
            if (keyState.IsKeyDown(Key.Escape))
                Exit();

            // Cambiar letra activa al presionar F1
            if (keyState.IsKeyDown(Key.F1) && !previousKeyState.IsKeyDown(Key.F1))
            {
                activeLetterIndex = (activeLetterIndex + 1) % letters.Count;
            }

            // Activar/desactivar rotación de los ejes al presionar F5
            if (keyState.IsKeyDown(Key.F5) && !previousKeyState.IsKeyDown(Key.F5))
            {
                axisRotationEnabled = !axisRotationEnabled;
            }

            // Movimiento de la letra activa
            if (!axisRotationEnabled && activeLetterIndex < letters.Count)
            {
                var letter = letters[activeLetterIndex];

                // Movimiento en los ejes X, Y y Z
                if (keyState.IsKeyDown(Key.Up))
                    letter.Position += new Vector3(0, moveSpeed, 0);

                if (keyState.IsKeyDown(Key.Down))
                    letter.Position += new Vector3(0, -moveSpeed, 0);

                if (keyState.IsKeyDown(Key.Left))
                    letter.Position += new Vector3(-moveSpeed, 0, 0);

                if (keyState.IsKeyDown(Key.Right))
                    letter.Position += new Vector3(moveSpeed, 0, 0);

                if (keyState.IsKeyDown(Key.W))
                    letter.Position += new Vector3(0, 0, -moveSpeed);

                if (keyState.IsKeyDown(Key.S))
                    letter.Position += new Vector3(0, 0, moveSpeed);

                // Rotación en el eje Z
                if (keyState.IsKeyDown(Key.Q))
                    letter.RotationZ += rotationSpeed;

                if (keyState.IsKeyDown(Key.E))
                    letter.RotationZ -= rotationSpeed;

                // Restablecer rotación
                if (keyState.IsKeyDown(Key.R))
                {
                    letter.RotationX = 0.0f;
                    letter.RotationY = 0.0f;
                    letter.RotationZ = 0.0f;
                }
            }

            // Rotación de los ejes en X e Y
            if (axisRotationEnabled)
            {
                if (keyState.IsKeyDown(Key.Up))
                    axisRotationX -= rotationSpeed;

                if (keyState.IsKeyDown(Key.Down))
                    axisRotationX += rotationSpeed;

                if (keyState.IsKeyDown(Key.Left))
                    axisRotationY -= rotationSpeed;

                if (keyState.IsKeyDown(Key.Right))
                    axisRotationY += rotationSpeed;
            }

            // Mostrar/ocultar ejes
            if (keyState.IsKeyDown(Key.A) && !previousKeyState.IsKeyDown(Key.A))
                showAxes = !showAxes;

            // Aumentar/disminuir el ancho de línea
            if (keyState.IsKeyDown(Key.Plus) || keyState.IsKeyDown(Key.KeypadPlus))
                lineWidth = Math.Min(lineWidth + 0.1f, 5.0f);

            if (keyState.IsKeyDown(Key.Minus) || keyState.IsKeyDown(Key.KeypadMinus))
                lineWidth = Math.Max(lineWidth - 0.1f, 0.5f);

            // Guardar estado de teclas para el siguiente frame
            previousKeyState = keyState;
        }

        private KeyboardState previousKeyState;
    }

    public class LetterU
    {
        public Vector3 Position { get; set; }
        public float RotationX { get; set; }
        public float RotationY { get; set; }
        public float RotationZ { get; set; }

        // Parámetros de la U
        private float thickness = 0.2f;
        private float width = 1.0f;
        private float height = 1.5f;
        private float depth = 0.4f;

        public LetterU(Vector3 initialPosition)
        {
            Position = initialPosition;
        }

        public void Draw()
        {
            // Aplicar rotaciones y traslaciones
            GL.PushMatrix();
            GL.Translate(Position);
            GL.Rotate(RotationX, 1.0f, 0.0f, 0.0f);
            GL.Rotate(RotationY, 0.0f, 1.0f, 0.0f);
            GL.Rotate(RotationZ, 0.0f, 0.0f, 1.0f);

            // Coordenadas de los vértices para la U
            float left = -width / 2;
            float right = width / 2;
            float bottom = -height / 2;
            float top = height / 2;
            float front = depth / 2;
            float back = -depth / 2;
            float leftInner = left + thickness;
            float rightInner = right - thickness;
            float bottomInner = bottom + thickness;

            // Establecer color blanco para las líneas
            GL.Color4(new Color4(1.0f, 1.0f, 1.0f, 1.0f));

            // Dibujar la U solo con líneas
            GL.Begin(PrimitiveType.Lines);

            // Parte izquierda - aristas verticales frontales
            GL.Vertex3(left, bottom, front);
            GL.Vertex3(left, top, front);

            GL.Vertex3(leftInner, bottom, front);
            GL.Vertex3(leftInner, top, front);

            // Parte izquierda - aristas verticales traseras
            GL.Vertex3(left, bottom, back);
            GL.Vertex3(left, top, back);

            GL.Vertex3(leftInner, bottom, back);
            GL.Vertex3(leftInner, top, back);

            // Parte izquierda - aristas horizontales superiores
            GL.Vertex3(left, top, front);
            GL.Vertex3(leftInner, top, front);

            GL.Vertex3(left, top, back);
            GL.Vertex3(leftInner, top, back);

            // Parte izquierda - conectores frente-atrás superiores
            GL.Vertex3(left, top, front);
            GL.Vertex3(left, top, back);

            GL.Vertex3(leftInner, top, front);
            GL.Vertex3(leftInner, top, back);

            // Parte izquierda - conectores frente-atrás inferiores
            GL.Vertex3(left, bottom, front);
            GL.Vertex3(left, bottom, back);

            GL.Vertex3(leftInner, bottom, front);
            GL.Vertex3(leftInner, bottom, back);

            // Parte inferior - aristas horizontales frontales
            GL.Vertex3(left, bottom, front);
            GL.Vertex3(right, bottom, front);

            GL.Vertex3(left, bottomInner, front);
            GL.Vertex3(right, bottomInner, front);

            // Parte inferior - aristas horizontales traseras
            GL.Vertex3(left, bottom, back);
            GL.Vertex3(right, bottom, back);

            GL.Vertex3(left, bottomInner, back);
            GL.Vertex3(right, bottomInner, back);

            // Parte inferior - conectores izquierda-derecha frontales
            GL.Vertex3(left, bottom, front);
            GL.Vertex3(left, bottomInner, front);

            GL.Vertex3(right, bottom, front);
            GL.Vertex3(right, bottomInner, front);

            // Parte inferior - conectores izquierda-derecha traseros
            GL.Vertex3(left, bottom, back);
            GL.Vertex3(left, bottomInner, back);

            GL.Vertex3(right, bottom, back);
            GL.Vertex3(right, bottomInner, back);

            // Parte inferior - conectores frente-atrás
            GL.Vertex3(right, bottom, front);
            GL.Vertex3(right, bottom, back);

            GL.Vertex3(right, bottomInner, front);
            GL.Vertex3(right, bottomInner, back);

            // Parte derecha - aristas verticales frontales
            GL.Vertex3(right, bottom, front);
            GL.Vertex3(right, top, front);

            GL.Vertex3(rightInner, bottom, front);
            GL.Vertex3(rightInner, top, front);

            // Parte derecha - aristas verticales traseras
            GL.Vertex3(right, bottom, back);
            GL.Vertex3(right, top, back);

            GL.Vertex3(rightInner, bottom, back);
            GL.Vertex3(rightInner, top, back);

            // Parte derecha - aristas horizontales superiores
            GL.Vertex3(right, top, front);
            GL.Vertex3(rightInner, top, front);

            GL.Vertex3(right, top, back);
            GL.Vertex3(rightInner, top, back);

            // Parte derecha - conectores frente-atrás superiores
            GL.Vertex3(right, top, front);
            GL.Vertex3(right, top, back);

            GL.Vertex3(rightInner, top, front);
            GL.Vertex3(rightInner, top, back);

            GL.End();
            GL.PopMatrix();
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            using (Game game = new Game(800, 600, "Letra U en 3D c/Rotacion, Eje, solo Aristas"))
            {
                game.Run(60.0);
            }
        }
    }
}